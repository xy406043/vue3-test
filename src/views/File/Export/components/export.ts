import saveAs from 'file-saver'
import Excel from 'exceljs'

// ~~ https://gitee.com/mirrors/exceljs#exceljs

// ‰ªÖÁî®‰∫éÈÄöÁî®ÂØºÂá∫Ôºå Â¶ÇÈúÄÂÖ∂ÂÆÉÂàôË¶ÅÈ¢ùÂ§ñÈÖçÁΩÆ
// Ë∞ÉÁî®Á§∫‰æã
// this.$doExportByExcel(exportInfo, [], filename, {
//   custom: false,
//   customMap: GROUP_DATA_MAP,
//   freeze: { x: 2, y: 1 }
// })

/**
 *
 * @param ExcelData       Ê∫êÊï∞ÊçÆ
 * @param exportColumns   Â∑≤ÂÆö‰πâÂ•ΩÁöÑcolumns,‰∏∫Á©∫Êó∂ÈÄöËøáconfig ÈáåÁöÑcustomMap Ëá™Âä®ÈÖçÁΩÆ
 * @param filename        Êñá‰ª∂Âêç
 * @param config
 */
export default function (excelData, exportColumns, filename, config) {
  // ÂàùÂßãÂåñÊñá‰ª∂‰ø°ÊÅØ
  const workbook = new Excel.Workbook()
  workbook.created = new Date()
  workbook.modified = new Date()

  // Ê∑ªÂä†Â∑•‰ΩúÁ∞øÔºåÈúÄË¶ÅÂá†‰∏™Â∞±Ê∑ªÂä†Âá†‰∏™ÔºåÂàÜÂà´ËøõË°åÈÖçÁΩÆ
  const worksheet = workbook.addWorksheet(filename, {
    properties: {
      tabColor: { argb: 'CC1FF3' }, //Ê†áÁ≠æÊ†∑Âºè
      defaultRowHeight: 20 //ÈªòËÆ§Ë°åÈ´ò
    }
  })

  // ËÆæÁΩÆcolumns
  if (config && config.custom) {
    // Ë°®Á§∫Â∑≤ÁªèÊòØËá™ÂÆö‰πâÁöÑ exportColumns
  } else {
    exportColumns = []
    const rowMap = config.customMap
    const keys = Object.keys(rowMap)
    keys.forEach((item, index) => {
      exportColumns.push({
        title: rowMap[item],
        header: rowMap[item],
        key: item,
        types: 'text',
        width: 15
      })
    })
  }
  // Ê≥®ÊÑè: Á¨¨‰∏ÄË°åÂøÖÈ°ªÊòØË°®Â§¥
  worksheet.columns = exportColumns

  // ËÆæÁΩÆË°®Â§¥È´òÂ∫¶„ÄÅËÉåÊôØÊ†∑Âºè ÔºàargbÈ¢úËâ≤ÁªìÊûÑÔºâ
  const row = worksheet.lastRow
  row.height = 40
  row.eachCell((cell, number) => {
    cell.fill = {
      type: 'pattern',
      pattern: 'darkTrellis',
      fgColor: { argb: '1DA2AA' },
      bgColor: { argb: '1DA2AA' } // Âè™ÊúâbgColorÊó∂ ÊòØ ÁÇπÊ†ÖËÉåÊôØ
    }
    cell.font = {
      name: 'Calibri',
      color: { argb: 'FFFFFF' },
      family: 2,
      scheme: 'major',
      size: 14,
      bold: true,
      outline: true
    }
  })
  row.commit()

  // Ê∑ªÂä†Êï∞ÊçÆÈ°π exceljs ÊúâÂ§öÁßç Êï∞ÊçÆÁ±ªÂûã ,exportColumns ‰∏≠ÁöÑtypes‰∏çÂ§™ÂØπÊ†áËøô‰∫õÁ±ªÂûãÔºåÂè™ÂØπÈÉ®ÂàÜÁâπÊÆäÁ±ªÂûãÂÅö‰∏ãÂ§ÑÁêÜ
  // !! ÊµãËØïÊï∞ÊçÆ
  excelData.unshift({ id: 'Ëã±‰øä', userCode: '', place: '', useIn: 'Ê≤ôÊãâÈÖ±Âç°' })
  excelData.unshift({ id: 0, userCode: 'Áõ¥ÁàΩ', place: '' })
  // !! ÊµãËØïÊï∞ÊçÆ
  excelData.forEach((x, xi) => {
    const list = []
    const rowData = {}
    exportColumns.forEach((y, yi) => {
      if (y.types === 'text') {
        rowData[y.key] = x[y.key]
      } else if (y.types === 'image' && x[y.key]) {
        const imageId2 = workbook.addImage({
          buffer: x[y.key], // ‰∫åËøõÂà∂ÊµÅÁöÑÂΩ¢Âºè
          extension: 'jpeg'
        })
        worksheet.addImage(imageId2, {
          tl: { col: 0.5 + b, row: 1.5 + a },
          ext: { width: 80, height: 80 } //todo ÈúÄË¶ÅÂõæÁâáÊó∂ÂÜçËÆæÁΩÆ
        })
      }
    })
    list.push(rowData)
    worksheet.addRows(list)
    //ÊéßÂà∂Ë°åÈ´ò
    const row = worksheet.lastRow
    row.height = 20
    row.commit()
  })

  // ÊéßÂà∂ÂçïÂÖÉÊ†ºÂÆΩÂ∫¶Ôºå ÁâπÂÆöÂàóË°®ÂèØ‰ª•Áõ¥Êé•ÂÜôÊ≠ª
  exportColumns.forEach((y, yi) => {
    let localWidth =
      y.title.toString().charCodeAt(0) > 255
        ? y.title.toString().length * 3 // Á≥ªÊï∞Êåâ Â≠óüëå /12
        : y.title.toString().length * 2
    excelData.forEach((x, xi) => {
      const local = x[y.key] || ''
      let width
      if (local && local.toString().charCodeAt(0) > 255) {
        width = local.toString().length * 2.4
      } else {
        width = local.toString().length * 1.3
      }
      if (width > localWidth) {
        localWidth = width
      }
    })
    y.width = localWidth > 13 ? Math.ceil(localWidth) : 13
  })

  // ÂçïÂÖÉÊ†ºÊ†∑ÂºèÂ§ÑÁêÜ
  worksheet.columns = exportColumns

  // !! ÊµãËØïÊï∞ÊçÆ --- ÊâãÂä®ÊéßÂà∂Ë°®Â§¥ =====================================
  // todo ÊåáÂÆöÂçïÂÖÉÊ†ºËÆæÁΩÆÊ†∑Âºè
  worksheet.mergeCells('B1', 'C1')
  worksheet.mergeCells('C2', 'C3')
  const toUseList = ['B2', 'A3', 'D3']
  toUseList.forEach(element => {
    worksheet.getCell(element).font = {
      name: 'Arial Black',
      color: { argb: 'FF00FF00' },
      family: 2,
      size: 14,
      italic: true
    }
    worksheet.getCell(element).fill = {
      type: 'pattern',
      pattern: 'darkTrellis',
      fgColor: { argb: '9DA2AA' },
      bgColor: { argb: '9DA2AA' } // Âè™ÊúâbgColorÊó∂ ÊòØ ÁÇπÊ†ÖËÉåÊôØ
    }
  })

  // !! ÊµãËØïÊï∞ÊçÆ ==================================================

  exportColumns.forEach((y, index) => {
    const dobCol = worksheet.getColumn(index + 1)
    dobCol.eachCell((cell, rowNumber) => {
      console.log('cell', cell)
      cell.alignment = {
        vertical: 'middle',
        horizontal: 'center'
      }
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      }
      // !! ÊµãËØïÊï∞ÊçÆ
      if (rowNumber <= 3) return
      // !! ÊµãËØïÊï∞ÊçÆ
      //   if (rowNumber <= 1) return
      cell.font = {
        scheme: 'major',
        size: 12,
        bold: true,
        color: { argb: '3E3F3C' }
      }
    })
  })

  // ÂÜªÁªìË°å„ÄÅÂàó
  const p = { state: 'frozen', xSplit: 1, ySplit: 1 }
  //   if (config.freeze) {
  //     p.xSplit = config.freeze.x || 0
  //     p.ySplit = config.freeze.y || 0
  //   }
  //   worksheet.views = [p]

  console.log('ÊúÄÁªàÁöÑÂ§ÑÁêÜ', worksheet, workbook, worksheet.getRow(2))

  // ÂØºÂá∫Êñá‰ª∂
  workbook.xlsx.writeBuffer().then(buffer => {
    saveAs(
      new Blob([buffer], {
        type: 'application/octet-stream'
      }),
      filename + '.' + 'xlsx'
    )
  })
}
